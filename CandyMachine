import Adafruit_BBIO.GPIO as GPIO
import Adafruit_BBIO.PWM as PWM 
import time  

SENSOR = 'P8_19'
LED = 'P8_13'
SERVO_TOP = 'P9_14'
SERVO_BOTTOM = 'P9_16'
BUTTON = 'P9_11'

mode = -1

GPIO.setup(BUTTON,GPIO.IN)
#GPIO.setup(SENSOR, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(SENSOR, GPIO.IN)
PWM.start(SERVO_TOP,2,50)
PWM.start(SERVO_BOTTOM,2,50)

def runServo():
    global mode
    if (mode == 1):
        cycle=1./18.*20+2
        PWM.set_duty_cycle(SERVO_TOP,cycle)
        time.sleep(1)
        cycle=1./18.*80+2
        PWM.set_duty_cycle(SERVO_BOTTOM,cycle)
        time.sleep(1)
        
        cycle=1./18.*270+2
        PWM.set_duty_cycle(SERVO_TOP,cycle)
        time.sleep(1)
        cycle=1./18.*80+2
        PWM.set_duty_cycle(SERVO_BOTTOM,cycle)
        time.sleep(1)
        
        cycle=1./18.*20+2
        PWM.set_duty_cycle(SERVO_TOP,cycle)
        time.sleep(1)
        cycle=1./18.*80+2
        PWM.set_duty_cycle(SERVO_BOTTOM,cycle)
        time.sleep(1)
        
    elif (mode == -1):
        cycle=1./18.*90+2
        PWM.set_duty_cycle(SERVO_TOP,cycle)
        time.sleep(1)
        cycle=1./18.*100+2
        PWM.set_duty_cycle(SERVO_BOTTOM,cycle)
        time.sleep(1)
        
        cycle=1./18.*270+2
        PWM.set_duty_cycle(SERVO_TOP,cycle)
        time.sleep(1)
        cycle=1./18.*270+2
        PWM.set_duty_cycle(SERVO_BOTTOM,cycle)
        time.sleep(1)
        
        cycle=1./18.*90+2
        PWM.set_duty_cycle(SERVO_TOP,cycle)
        time.sleep(1)
        cycle=1./18.*100+2
        PWM.set_duty_cycle(SERVO_BOTTOM,cycle)
        time.sleep(1)
        
def buttonPress():  #button press be in main
    global mode
    if GPIO.input(BUTTON):
        mode = mode * -1
        if (mode == 1):
            print ("Small Portions")
        elif (mode == -1):
            print ("Large Portions")
    time.sleep(1)     


while(1):
    buttonPress()
    if GPIO.input(SENSOR):
        runServo()
    else:
        time.sleep(.01)   
    time.sleep(1)
    



  
    